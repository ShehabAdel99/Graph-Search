# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled5.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QUrl
from PyQt5.QtWidgets import QMessageBox
from pyvis.network import Network
from PyQt5 import QtWebEngineWidgets
from GraphBackend import Graph
g = Graph()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("AI Project")
        MainWindow.resize(919, 600)
        MainWindow.setMaximumSize(QtCore.QSize(919, 600))
        MainWindow.setMinimumSize(QtCore.QSize(919, 600))
        #MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.GraphWidget = QtWebEngineWidgets.QWebEngineView(self.centralwidget)
        self.GraphWidget.setGeometry(QtCore.QRect(450, 20, 431, 471))
        self.GraphWidget.setObjectName("GraphWidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(410, 10, 21, 511))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 150, 231, 36))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(140, 150, 231, 36))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(140, 230, 231, 36))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(20, 230, 231, 36))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(20, 325, 231, 31))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(140, 320, 231, 36))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.splitter_4 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_4.setGeometry(QtCore.QRect(10, 10, 291, 121))
        self.splitter_4.setOrientation(QtCore.Qt.Vertical)
        self.splitter_4.setObjectName("splitter_4")
        self.splitter_3 = QtWidgets.QSplitter(self.splitter_4)
        self.splitter_3.setOrientation(QtCore.Qt.Vertical)
        self.splitter_3.setObjectName("splitter_3")
        self.splitter = QtWidgets.QSplitter(self.splitter_3)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.splitter_2 = QtWidgets.QSplitter(self.splitter_3)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.label_2 = QtWidgets.QLabel(self.splitter_2)
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.comboBox_3 = QtWidgets.QComboBox(self.splitter_2)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.setItemText(0, "")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_3 = QtWidgets.QLabel(self.splitter_4)
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.comboBox_2 = QtWidgets.QComboBox(self.splitter_4)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.setItemText(0, "")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(51, 275, 31, 31))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.clicked.connect(lambda : self.insertnode(self.getText5(),self.getText4()))
        self.pushButton.setGeometry(QtCore.QRect(280, 190, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(280, 270, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.insertEdge(self.getText6(), self.getText7(),self.getText3()))
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 360, 41, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(140, 360, 41, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(140, 270, 41, 41))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(140, 180, 41, 41))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(20, 180, 41, 41))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(20, 270, 31, 41))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(90, 270, 31, 41))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 430, 411, 80))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_8.setReadOnly(True)
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.verticalLayout.addWidget(self.lineEdit_8)
        self.lineEdit_9 = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEdit_9.setEnabled(True)
        self.lineEdit_9.setDragEnabled(False)
        self.lineEdit_9.setReadOnly(True)
        self.lineEdit_9.setClearButtonEnabled(False)
        self.pushButton_70 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_70.setObjectName("pushButton_70")

        self.lineEdit_9.setObjectName("lineEdit_9")
        self.verticalLayout.addWidget(self.lineEdit_9)
        self.verticalLayout.addWidget(self.pushButton_70)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(200, 360, 194, 51))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(lambda : self.Solve())
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.showpathinff())
        self.pushButton_70.clicked.connect(lambda : self.clear())
        self.horizontalLayout.addWidget(self.pushButton_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 919, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AI Project"))
        MainWindow.setWindowIcon(QtGui.QIcon('icon.png'))
        self.label_4.setText(_translate("MainWindow", "Insert Node"))
        self.label_5.setText(_translate("MainWindow", "Heuristic (optional)"))
        self.label_6.setText(_translate("MainWindow", "Weight "))
        self.label_7.setText(_translate("MainWindow", "Insert egde "))
        self.label_8.setText(_translate("MainWindow", "Start"))
        self.label_9.setText(_translate("MainWindow", "Goal(s) separated by ,"))
        self.label_2.setText(_translate("MainWindow", "Choose your Search Algorithm "))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "BFS"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "DFS"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "UCS"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "Iterative Deepening"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "Greedy (must insert heuristic)"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "A* (must insert heuristic)"))
        self.label_3.setText(_translate("MainWindow", "Type of your Graph "))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "Directed Graph "))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "Undirected Graph "))
        self.label_10.setText(_translate("MainWindow", " to"))
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.pushButton_2.setText(_translate("MainWindow", "Add"))
        self.lineEdit_8.setText(_translate("MainWindow", "Path: "))
        self.lineEdit_9.setText(_translate("MainWindow", "path cost = "))
        self.pushButton_4.setText(_translate("MainWindow", "Solve"))
        self.pushButton_3.setText(_translate("MainWindow", "Show path"))
        self.pushButton_70.setText(_translate("MainWindow", "Clear"))

    l = []
    cost = 0

    def bfs(self, txt, tx2):
        g.remove_pref()
        try:
            g.explored.clear()
            w = tx2.split(",")
            self.l, self.cost = g.BFS(txt, w)
            self.visualize([], g.explored)
            self.changePath(self.l, self.cost)
        except:
            self.lineEdit_8.setText("NO PATH AVAILABLE")
            self.lineEdit_9.setText("cost= 0")
            self.drawGraph()
    def dfs(self, txt, tx2):
        g.remove_pref()
        try:
            g.explored.clear()
            w = tx2.split(",")
            self.l, self.cost = g.DFS(txt, w)
            self.visualize([], g.explored)
            self.changePath(self.l, self.cost)
        except:
            self.lineEdit_8.setText("NO PATH AVAILABLE")

    def ucs(self, txt, tx2):
        g.remove_pref()
        try:
            g.explored.clear()
            w = tx2.split(",")
            self.l, self.cost = g.UCS(txt, w)
            self.visualize([], g.explored)
            self.changePath(self.l, self.cost)
        except:
            self.lineEdit_8.setText("NO PATH AVAILABLE")

    def greedy(self, txt, tx2):
        g.remove_pref()
        try:
            g.explored.clear()
            w = tx2.split(",")
            self.l, self.cost = g.greedy(txt, w)
            self.visualize([], g.explored)
            self.changePath(self.l, self.cost)
        except:
            self.lineEdit_8.setText("NO PATH AVAILABLE")

    def aStar(self, txt, tx2):
        g.remove_pref()
        try:
            g.explored.clear()
            w = tx2.split(",")
            self.l, self.cost = g.aStar(txt, w)
            self.visualize([], g.explored)
            self.changePath(self.l, self.cost)
        except:
            self.lineEdit_8.setText("NO PATH AVAILABLE")
    def Solve(self):
        x=self.comboBox_3.currentText()
        if x=="":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Searching algorithm")
            msg.setInformativeText("Please select searching algorithm")
            msg.setWindowTitle("Error")
            msg.exec_()
        if x=="BFS":
            self.bfs(self.getText(),self.getText2())
        if x=="DFS":
            self.dfs(self.getText(), self.getText2())
        if x=="UCS":
            self.ucs(self.getText(), self.getText2())
        if x=="Greedy (must insert heuristic)":
            self.greedy(self.getText(),self.getText2())
        if x=="A* (must insert heuristic)":
            self.aStar(self.getText(),self.getText2())
        if x=="Iterative Deepening":
            self.bfs(self.getText(),self.getText2())

        self.lineEdit.clear()
        self.lineEdit_2.clear()
    def insertnode(self, txt, tx2):
        if txt == '':
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Node Name!")
            msg.setInformativeText("Node Name can't be null")
            msg.setWindowTitle("Error")
            msg.exec_()
            return
        elif tx2 == '':

            t = g.insertVertex(txt, 0)
        elif not (tx2.isdigit()):
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Node Heuristic!")
            msg.setInformativeText("Heuristic must be a number")
            msg.setWindowTitle("Error")
            msg.exec_()
            return
        else:

            t = g.insertVertex(txt, int(tx2))
        if t == -1:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Node Already Exists!")
            msg.setInformativeText("No Duplicates allowed")
            msg.setWindowTitle("Error")
            msg.exec_()
            return
        self.drawGraph()
        self.lineEdit_4.clear()
        self.lineEdit_5.clear()

    def showpathinff(self):
        self.visualize(self.l, g.explored)

    def changePath(self, lis, c):
        st = ""
        for i in lis:
            st += i
            st += ", "
        st1 = "Path: ["
        st1 += st
        st1 += "]"
        st2 = "Cost= "
        st2 += str(c)
        self.lineEdit_8.setText(st1)
        self.lineEdit_9.setText(st2)

    def visualize(self, l, v):
        N = Network(height='100%', width='100%', directed=True)
        for i in g.ListofVertices:
            flag = 0
            for x in l:
                if x == i.name:
                    flag = 1
                    break
            if flag != 1:
                for x in v:
                    if x == i.name:
                        flag = 2
                        break
            if flag == 1:
                color = "#C64248"
            elif flag == 0:
                color = '#87CEEB'
            else:
                color = '#c1c1c1'
            N.add_node(i.name, label=i.name, color=color,title=str(i.getH()))

        for v in g.ListofVertices:
            for i in v.Neighbour:
                N.add_edge(v.name, i.name, weight=i.weight, title=i.weight, color='#000000')
        N.write_html('graph.html')
        self.GraphWidget.load(QUrl.fromLocalFile(os.path.abspath(os.path.join(os.path.dirname(__file__), "graph.html"))))

    def insertEdge(self, txt, tx2, txt3):

        if self.getGraphType()=="Directed Graph ":
            if txt == '' or tx2 == '':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge error!")
                msg.setInformativeText("Start or end can't be null")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if txt3.isdigit():
                if txt in g.ListofNodes.get(tx2):
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setText("Edge error!")
                    msg.setInformativeText("Edge already inserted in opposite direction")
                    msg.setWindowTitle("Error")
                    msg.exec_()
                    return
                t = g.insertEdge(txt, tx2, txt3)
            elif txt3=='':
                t = g.insertEdge(txt, tx2)
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Weight error!")
                msg.setInformativeText("Weight must be a number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if t == "V1 ERR":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Node 1 Doesn't Exist")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            elif t == "V2 ERR":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Node 2 Doesn't Exist")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            elif t == "Exist":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Edge already exists")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            self.drawGraph()
            self.lineEdit_3.clear()
            self.lineEdit_6.clear()
            self.lineEdit_7.clear()
        elif self.comboBox_2.currentText()=="Undirected Graph " :
            if txt == '' or tx2 == '':
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge error!")
                msg.setInformativeText("Start or end can't be null")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if txt3.isdigit():
                t = g.insertEdge(txt, tx2, txt3)
                t2=g.insertEdge(tx2,txt,txt3)
            elif txt3=="":
                t = g.insertEdge(txt, tx2)
                t2 = g.insertEdge(tx2, txt)
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Weight error!")
                msg.setInformativeText("Weight must be a number")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            if t == "V1 ERR":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Node 1 Doesn't Exist")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            elif t == "V2 ERR":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Node 2 Doesn't Exist")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            elif t == "Exist":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Critical)
                msg.setText("Edge Error!")
                msg.setInformativeText("Edge already exists")
                msg.setWindowTitle("Error")
                msg.exec_()
                return
            self.drawGraph()
            self.lineEdit_3.clear()
            self.lineEdit_6.clear()
            self.lineEdit_7.clear()




    def drawGraph(self):
        N = Network(height='100%', width='100%', directed=True)
        for i in g.ListofVertices:
            N.add_node(i.name, label=i.name, color="#87CEEB",title=str(i.getH()))

        for v in g.ListofVertices:
            for i in v.Neighbour:
                N.add_edge(v.name, i.name, weight=i.weight, title=i.weight, color='#000000')
        N.write_html('graph.html')
        self.GraphWidget.load(QUrl.fromLocalFile(os.path.abspath(os.path.join(os.path.dirname(__file__), "graph.html"))))

    def getText4(self):
        return self.lineEdit_4.text()
    def getText5(self):
        return self.lineEdit_5.text()
    def getText3(self):
        return self.lineEdit_3.text()
    def getText6(self):
        return self.lineEdit_6.text()
    def getText7(self):
        return self.lineEdit_7.text()
    def getText(self):
        return self.lineEdit.text()
    def getText2(self):
        return self.lineEdit_2.text()
    def getGraphType(self):
        if self.comboBox_2.currentText()=="":
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Graph type error")
            msg.setInformativeText("Please choose graph type")
            msg.setWindowTitle("Error")
            msg.exec_()
            return
        self.comboBox_2.setEnabled(False)
        return self.comboBox_2.currentText()
    def clear(self):
        global g
        self.l.clear()
        self.cost=0
        g=Graph()
        g.remove_pref()
        self.drawGraph()
        self.lineEdit_8.setText("Path: ")
        self.lineEdit_9.setText("path cost = ")
        self.comboBox_2.setEnabled(True)
        self.comboBox_2.setCurrentText("")
        self.comboBox_3.setCurrentText("")
        self.lineEdit.clear()
        self.lineEdit_4.clear()
        self.lineEdit_2.clear()
        self.lineEdit_3.clear()
        self.lineEdit_5.clear()
        self.lineEdit_6.clear()
        self.lineEdit_7.clear()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
